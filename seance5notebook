#Exercice 1

def cal_tauxvariation(f, a, h):
    taux = (f(a + h) - f(a)) / h
    return taux


def fa(x):
    return 3 * pow(x, 3) + 1 * pow(x, 2) - 5


#f=lambdify(x,3**x+x**2-5)

print(cal_tauxvariation(fa, 0, 1))

# Exercice 3
# facon iterative

def calcul_suite(n, u0):

    uN = u0 + n + 1

    for i in range(10):
        uN = uN + n + 1
        print(uN)

# par recurrence

def calcul_suite_recurrence(n, uN):
    resp = uN + n + 1
    print(resp)
    return calcul_suite_recurrence(n, resp)

# Exercice 4

def TN(n):
  return pow(n,2)-pow((n-1),2)

def sN(n):
    sn = 0
    for i in range(1,n+1):
        sn = sn + TN(i)
    print(sn)
    return sn

print(sN(4))

#Exercice 5 

def val_app(epsilon): 
    elm1=1
    elm2=elm1-1/(3**2)
    signe=1
    val=5
    while abs(elm2-elm1)>epsilon:
       elm1=elm2
       elm2=elm1+signe*(1/(val**2))
       val+=2
       signe*=(-1)
    return elm2
 
print(val_app(0.05))

# Exercice 6 

def limite(epsilon):
    U0 = 2
    Un = U0+2/U0
    while abs(Un-U0) > epsilon:
        U0 = Un
        Un = U0+2/U0
    return Un
 
 
print(limite(0.05))
#Exercice 1

def cal_tauxvariation(f, a, h):
    taux = (f(a + h) - f(a)) / h
    return taux


def fa(x):
    return 3 * pow(x, 3) + 1 * pow(x, 2) - 5


#f=lambdify(x,3**x+x**2-5)

print(cal_tauxvariation(fa, 0, 1))

# Exercice 3
# facon iterative

def calcul_suite(n, u0):

    uN = u0 + n + 1

    for i in range(10):
        uN = uN + n + 1
        print(uN)

# par recurrence

def calcul_suite_recurrence(n, uN):
    resp = uN + n + 1
    print(resp)
    return calcul_suite_recurrence(n, resp)

# Exercice 4

def TN(n):
  return pow(n,2)-pow((n-1),2)

def sN(n):
    sn = 0
    for i in range(1,n+1):
        sn = sn + TN(i)
    print(sn)
    return sn

print(sN(4))

#Exercice 5 

def val_app(epsilon): 
    elm1=1
    elm2=elm1-1/(3**2)
    signe=1
    val=5
    while abs(elm2-elm1)>epsilon:
       elm1=elm2
       elm2=elm1+signe*(1/(val**2))
       val+=2
       signe*=(-1)
    return elm2
 
print(val_app(0.05))

# Exercice 6 

def limite(epsilon):
    U0 = 2
    Un = U0+2/U0
    while abs(Un-U0) > epsilon:
        U0 = Un
        Un = U0+2/U0
    return Un
 
 
print(limite(0.05))
